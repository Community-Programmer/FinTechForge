generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  username          String
  email             String              @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  level             Int                 @default(1)
  xp                Int                 @default(5)
  currentRank       String              @default("Novice")
  accounts          Account[]
  educationProgress EducationProgress[]
  achievements      Achievement[]
  skillTrees        UserSkillTree[]
  dailyStreak       Int                 @default(0)
  lastActiveDate    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSkillTree {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  user        User   @relation(fields: [userId], references: [id])
  userId      String @db.ObjectId
  skillTreeId String
  progress    Json // Stores completed nodes, etc.

  @@unique([userId, skillTreeId])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  provider          String
  providerAccountId String  @unique
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model EmailVerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  token     String   @unique
  expireAt  DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  token     String   @unique
  expireAt  DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model EducationProgress {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  lessonId    String
  completed   Boolean   @default(false)
  xpEarned    Int       @default(0)
  completedAt DateTime?

  @@unique([userId, lessonId])
}

model Lesson {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String
  duration       Int // in minutes
  xpReward       Int
  category       String
  icon           String?
  learningPath   LearningPath?   @relation(fields: [learningPathId], references: [id])
  learningPathId String?         @db.ObjectId
  quizzes        Quiz[]
  flashcardDecks FlashcardDeck[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Quiz {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  lesson      Lesson?        @relation(fields: [lessonId], references: [id])
  lessonId    String?        @db.ObjectId
  title       String
  description String
  xpReward    Int
  questions   QuizQuestion[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model QuizQuestion {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  quiz          Quiz     @relation(fields: [quizId], references: [id])
  quizId        String   @db.ObjectId
  question      String
  options       String[]
  correctAnswer Int
  explanation   String
}

model FlashcardDeck {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  lesson      Lesson?     @relation(fields: [lessonId], references: [id])
  lessonId    String?     @db.ObjectId
  title       String
  description String
  flashcards  Flashcard[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Flashcard {
  id     String        @id @default(auto()) @map("_id") @db.ObjectId
  deck   FlashcardDeck @relation(fields: [deckId], references: [id])
  deckId String        @db.ObjectId
  front  String
  back   String
}

model LearningPath {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  color     String
  icon      String?
  lessons   Lesson[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SkillChallenge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  difficulty  String
  xpReward    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reward {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  icon        String?
  unlockAtXp  Int
}

model Achievement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  type        String
  title       String
  description String
  color       String?
  requirement String?
  earnedAt    DateTime @default(now())
}
