generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  username          String
  email             String              @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  educationProgress EducationProgress[]
  achievements      Achievement[]
  skillTrees        UserSkillTree[]
  dailyStreak       Int                 @default(0)
  lastActiveDate    DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  provider          String
  providerAccountId String  @unique
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model EmailVerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  token     String   @unique
  expireAt  DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  token     String   @unique
  expireAt  DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model EducationProgress {
  id          String    @id @default(uuid()) @map("_id")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  lessonId    String
  completed   Boolean   @default(false)
  xpEarned    Int       @default(0)
  completedAt DateTime?
}

model Achievement {
  id       String   @id @default(uuid()) @map("_id")
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @db.ObjectId
  type     String
  earnedAt DateTime @default(now())
}

model UserSkillTree {
  id          String @id @default(uuid()) @map("_id")
  user        User   @relation(fields: [userId], references: [id])
  userId      String @db.ObjectId
  skillTreeId String
  progress    Json // Stores completed nodes, etc.
}
